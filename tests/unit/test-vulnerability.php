<?php

use Soter_Core\Package;
use Soter_Core\Vulnerability;

class Vulnerability_Test extends WP_Mock\Tools\TestCase {
	/** @test */
	function it_trims_individual_string_data_points() {
		// Actual response includes a trailing space.
		$this->assertEquals(
			'Contact Form 7 <= 3.7.1 - Security Bypass',
			$this->make_vulnerability()->title
		);
	}

	/** @test */
	function it_converts_timestamps_to_datetime_objects() {
		$vulnerability = $this->make_vulnerability();

		$this->assertEquals(
			new DateTime( '2014-08-01T10:59:06.000Z' ),
			$vulnerability->created_at
		);
		$this->assertEquals(
			new DateTime( '2015-05-15T13:48:25.000Z' ),
			$vulnerability->updated_at
		);
		$this->assertNull( $vulnerability->published_date );
	}

	/** @test */
	function it_provides_access_to_all_props_included_in_api_response() {
		$vulnerability = $this->make_vulnerability();

		$this->assertTrue( is_int( $vulnerability->id ) );

		foreach ( array( 'title', 'vuln_type', 'fixed_in' ) as $key ) {
			$this->assertTrue( is_string( $vulnerability->{$key} ) );
		}

		foreach ( array( 'created_at', 'updated_at' ) as $key ) {
			$this->assertTrue( $vulnerability->{$key} instanceof DateTime );
		}

		// A bit odd because it can be null from API or null if not set.
		// Need to find a response where this is actually set and swap it out for this test.
		$this->assertNull( $vulnerability->published_date );

		$this->assertTrue( is_array( $vulnerability->references ) );
	}

	/** @test */
	function it_knows_if_it_affects_the_current_package_version() {
		$package = Mockery::mock( Package::class )
			->shouldReceive( 'get_version' )
			->once()
			->andReturn( '3.7' )
			->getMock();

		$this->assertTrue( $this->make_vulnerability( $package )->affects_current_version() );
	}

	/** @test */
	function it_knows_if_affects_a_given_package_version() {
		$vulnerability = $this->make_vulnerability();

		$this->assertTrue( $vulnerability->affects_version( '3.7' ) );
		$this->assertFalse( $vulnerability->affects_version( '3.8' ) );
	}

	/** @test */
	function it_provides_access_to_processed_data_array() {
		$data = $this->make_vulnerability()->get_data();

		// Testing for lack of trailing space.
		$this->assertEquals( 'Contact Form 7 <= 3.7.1 - Security Bypass', $data['title'] );
	}

	/** @test */
	function it_provides_access_to_package() {
		$package = Mockery::mock( Package::class );

		$this->assertSame( $package, $this->make_vulnerability( $package )->get_package() );
	}

	/** @test */
	function it_provides_access_to_raw_data_array() {
		$raw = $this->make_vulnerability()->get_raw();

		// Testing for trailing space.
		$this->assertEquals( 'Contact Form 7 <= 3.7.1 - Security Bypass ', $raw['title'] );
	}

	protected function make_vulnerability( $package = null ) {
		return new Vulnerability( ( $package ? $package : Mockery::mock( Package::class ) ), [
			'id' => 7020,
			'title' => 'Contact Form 7 <= 3.7.1 - Security Bypass ',
			'created_at' => '2014-08-01T10:59:06.000Z',
			'updated_at' => '2015-05-15T13:48:25.000Z',
			'published_date' => null,
			'references' => [
				'url' => [
					'http://www.securityfocus.com/bid/66381/',
				],
				'cve' => [
					'2014-2265',
				],
			],
			'vuln_type' => 'AUTHBYPASS',
			'fixed_in' => '3.7.2',
		] );
	}
}
