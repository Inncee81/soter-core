<?php
/**
 * Vulnerability class.
 *
 * @package soter-core
 */

namespace Soter_Core;

use DateTime;

/**
 * Defines the API vulnerability class.
 */
class Vulnerability {
	/**
	 * Cleaned up vulnerability array.
	 *
	 * @var  array
	 */
	protected $data = array();

	/**
	 * Package which is affected by this vulnerability.
	 *
	 * @var Package
	 */
	protected $package;

	/**
	 * Raw vulnerability array provided by JSON decoding an API response.
	 *
	 * @var array
	 */
	protected $raw;

	/**
	 * Class constructor.
	 *
	 * @param Package $package       Package slug affected by this vulnerability.
	 * @param array   $vulnerability JSON decoded vulnerability array.
	 */
	public function __construct( Package $package, array $vulnerability ) {
		$this->package = $package;
		$this->raw     = $vulnerability;

		$timestamps = array( 'created_at', 'published_date', 'updated_at' );

		foreach ( $vulnerability as $key => $value ) {
			// @todo Better to just leave as received from API?
			if ( is_string( $value ) ) {
				$value = trim( $value );
			}

			// It looks like published_date is often null.
			if ( $value && in_array( $key, $timestamps, true ) ) {
				// I've not yet run into an invalid timestamp on WPVulnDB, but just in case...
				try {
					$value = new DateTime( $value );
				} catch ( \Exception $e ) {
					$value = null;
				}
			}

			$this->data[ $key ] = $value;
		}
	}

	/**
	 * Magic getter - proxies all property requests to timestamps or data arrays.
	 *
	 * @param  string $key Property name.
	 *
	 * @return mixed
	 */
	public function __get( $key ) {
		if ( array_key_exists( $key, $this->data ) ) {
			return $this->data[ $key ];
		}

		return null;
	}

	/**
	 * Check whether this vulnerability affects the current version of the attached package.
	 *
	 * @return boolean
	 */
	public function affects_current_version() {
		return $this->affects_version( $this->get_package()->get_version() );
	}

	/**
	 * Check whether this vulnerabilty affects a given package version.
	 *
	 * @param  string $version Package version.
	 *
	 * @return boolean
	 */
	public function affects_version( $version ) {
		return is_null( $this->data['fixed_in'] )
			|| version_compare( (string) $version, $this->data['fixed_in'], '<' );
	}

	/**
	 * Data getter.
	 *
	 * @return array
	 */
	public function get_data() {
		return $this->data;
	}

	/**
	 * Package getter.
	 *
	 * @return Package
	 */
	public function get_package() {
		return $this->package;
	}

	/**
	 * Raw data getter.
	 *
	 * @return array
	 */
	public function get_raw() {
		return $this->raw;
	}
}
